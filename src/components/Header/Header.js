import React, { useContext, useState, useEffect } from "react";
import { ThemeContext } from "../../context/ThemeContext";
import "./Header.css";
import { FaSearch, FaTimes, FaChevronRight } from "react-icons/fa";
import { FiTrendingUp } from "react-icons/fi";

// Ana kategoriler
const categories = [
    { title: "TÃ¼m EÄŸitimler", submenu: [] },
    { title: "Kariyer Yolu", submenu: ["Sistem YÃ¶neticisi", "Veri Merkezi UzmanÄ±", "SÄ±zma Testi UzmanÄ±", "Siber GÃ¼venlik UzmanÄ±", "Adli BiliÅŸim UzmanÄ±", "ZararlÄ± YazÄ±lÄ±m UzmanÄ±", "Ä°ÅŸ Analisti", "YazÄ±lÄ±m Test UzmanÄ±", "DevOps UzmanÄ±", "Proje YÃ¶neticisi", "Bilgi GÃ¼venliÄŸi UzmanÄ±", "RPA UzmanÄ±", "Blokzincir UzmanÄ±", "CBS YazÄ±lÄ±m UzmanÄ±", "GÃ¶mÃ¼lÃ¼ Sistemler UzmanÄ±"] },
    { title: "Sistem DÃ¼nyasÄ±", submenu: ["Ä°ÅŸletim Sistemleri", "Siber GÃ¼venlik", "Bulut Sistemler"] },
    { title: "Ä°ÅŸletme DÃ¼nyasÄ±", submenu: ["GiriÅŸimcilik", "Pazarlama", "Proje YÃ¶netimi", "Ofis ProgramlarÄ±"] },
    { title: "KiÅŸisel GeliÅŸim DÃ¼nyasÄ±", submenu: [] },
    { title: "K12 DÃ¼nyasÄ±", submenu: [] },
    { title: "TasarÄ±m DÃ¼nyasÄ±", submenu: [] },
    { title: "Yapay Zeka DÃ¼nyasÄ±", submenu: [] },
    { title: "GÃ¼venli Ä°nternet", submenu: [] },
    { title: "RegÃ¼lasyon DÃ¼nyasÄ±", submenu: [] },
    { title: "Temel Bilimler", submenu: ["Matematik"] },
    { title: "YazÄ±lÄ±m DÃ¼nyasÄ±", submenu: ["Blok Zincir", "Ä°ÅŸ ZekasÄ± ve Raporlama", "Mobil Uygulama", "Oyun GeliÅŸtirme", "Programlama Dilleri"] },
    { title: "Kurum ve KuruluÅŸlar", submenu: ["TÃ¼rk Patent ve Marka Kurumu", "KarayollarÄ± Genel MÃ¼dÃ¼rlÃ¼ÄŸÃ¼"] }
];

// Arama kutusu altÄ±nda Ã¶nerilecek baÅŸlÄ±klar
const suggestedCategories = [
    "TÃ¼m EÄŸitimler",
    "Yapay Zeka",
    "Ä°ngilizce",
    "Python",
    "Veri TabanÄ±",
    "Excel",
    "Mobil GeliÅŸtirme",
    "Ä°ÅŸletim Sistemleri",
    "Web TasarÄ±mÄ±"
];

const Header = () => {
    const { theme } = useContext(ThemeContext);
    const [isSticky, setIsSticky] = useState(false);
    const [dropdownOpen, setDropdownOpen] = useState(false);
    const [activeSubmenu, setActiveSubmenu] = useState(null);
    const [submenuPosition, setSubmenuPosition] = useState({ left: "250px", top: "0px" });

    const [searchOpen, setSearchOpen] = useState(false);
    const [searchText, setSearchText] = useState("");

    useEffect(() => {
        const handleScroll = () => {
            setIsSticky(window.scrollY > 50);
        };
        window.addEventListener("scroll", handleScroll);
        return () => window.removeEventListener("scroll", handleScroll);
    }, []);

    const handleMouseEnter = (index, event) => {
        if (activeSubmenu !== index) {
            setActiveSubmenu(null);
            setTimeout(() => setActiveSubmenu(index), 50);
        }
        const rect = event.currentTarget.getBoundingClientRect();
        setSubmenuPosition({
            left: `${rect.left + rect.width}px`,
            top: `${rect.top - 70}px`
        });
    };

    const handleMouseLeave = (index) => {
        if (categories[index].submenu.length > 0) {
            return;
        }
        setActiveSubmenu(null);
    };

    return (
        <>
            <header className={`header ${theme} ${isSticky ? "sticky-header" : ""}`}>
                <div className="header-top">
                    {/* Sol KÄ±sÄ±m */}
                    <div className="left-section">
                        <img
                            src="https://assets-btkakademi-gov-tr.akamaized.net/api/gallery/51/bb2b1a79-8a7f-4c18-970c-6687a910b496/BTKAkademi-Normal.png?t=1739345573413"
                            alt="BTK Akademi"
                            className="btk-logo"
                        />

                        <div
                            className="dropdown"
                            onMouseEnter={() => setDropdownOpen(true)}
                            onMouseLeave={() => {
                                setDropdownOpen(false);
                                setActiveSubmenu(null);
                            }}
                        >
                            <button className="dropdown-button">â˜° Kategoriler</button>
                            {dropdownOpen && (
                                <div className="dropdown-menu">
                                    {categories.map((category, index) => (
                                        <div
                                            key={index}
                                            className={`dropdown-item ${category.submenu.length > 0 ? "has-submenu" : ""}`}
                                            onMouseEnter={(event) => category.submenu.length > 0 && handleMouseEnter(index, event)}
                                            onMouseLeave={() => handleMouseLeave(index)}
                                        >
                                            {category.title}
                                            {category.submenu.length > 0 && <FaChevronRight className="arrow-icon" />}
                                            {activeSubmenu === index && (
                                                <div
                                                    className="submenu"
                                                    style={{ left: submenuPosition.left, top: submenuPosition.top }}
                                                    onMouseEnter={() => setActiveSubmenu(index)}
                                                >
                                                    {category.submenu.map((sub, idx) => (
                                                        <div key={idx} className="submenu-item">{sub}</div>
                                                    ))}
                                                </div>
                                            )}
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>

                    {/* SaÄŸ KÄ±sÄ±m: Arama ve GiriÅŸ ButonlarÄ± */}
                    <div className="auth-buttons">
                        <div className="search-box">
                            {searchOpen && (
                                <>
                                    <input
                                        type="text"
                                        placeholder="Ne Ã¶ÄŸrenmek istiyorsunuz?"
                                        value={searchText}
                                        onChange={(e) => setSearchText(e.target.value)}
                                        autoFocus
                                    />
                                    <div className="search-suggestions">
                                        <h4>En Ã‡ok AratÄ±lanlar</h4>
                                        <ul>
                                            {suggestedCategories.map((cat, index) => (
                                                <li key={index}>
                                                    <FiTrendingUp style={{ marginRight: "6px", color: "#00a859" }} /> {/* ðŸ”„ GÃ¼ncellendi */}
                                                    {cat}
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                </>
                            )}
                            <button className="search-button" onClick={() => setSearchOpen(!searchOpen)}>
                                {searchOpen ? <FaTimes /> : <FaSearch />}
                            </button>
                        </div>

                        <button className="login-button">GiriÅŸ Yap</button>
                    </div>
                </div>


            </header>

            {/* Ä°Ã§eriÄŸi aÅŸaÄŸÄ± kaydÄ±rmak iÃ§in boÅŸluk */}
            <div className="page-content"></div>
        </>
    );
};

export default Header;
